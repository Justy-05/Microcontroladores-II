#include <Wire.h>
#include <LiquidCrystal_I2C.h>
#include <SoftwareSerial.h>

// Conexi贸n al HC-06
SoftwareSerial bluetooth(2, 3); // RX, TX

// Direcci贸n I2C del LCD (ajusta si es necesario)
LiquidCrystal_I2C lcd(0x27, 16, 2);

// Variables para manejar el texto
String inputText = "";
String currentText = "";
bool readyToScroll = false;
int scrollIndex = 0;
unsigned long previousMillis = 0;
const long scrollInterval = 400;

void setup() {
  lcd.init();
  lcd.backlight();
  lcd.setCursor(0, 0);
  lcd.print("Esperando texto");

  // Inicializa comunicaci贸n USB y Bluetooth
  Serial.begin(9600);
  bluetooth.begin(9600);
}

void loop() {
  // Leer desde Monitor Serial (USB)
  if (Serial.available()) {
    char c = Serial.read();
    procesarCaracter(c);
  }

  // Leer desde Bluetooth (HC-06)
  if (bluetooth.available()) {
    char c = bluetooth.read();
    procesarCaracter(c);
  }

  // Hacer scroll si es necesario
  if (readyToScroll) {
    unsigned long currentMillis = millis();
    if (currentMillis - previousMillis >= scrollInterval) {
      previousMillis = currentMillis;
      scrollIndex++;
      if (scrollIndex + 16 > currentText.length()) {
        scrollIndex = 0;
      }

      lcd.setCursor(0, 0);
      lcd.print(currentText.substring(scrollIndex, scrollIndex + 16));
    }
  }
}

// Funci贸n para manejar entrada de texto desde USB o BT
void procesarCaracter(char c) {
  if (c == '\n' || c == '\r') {
    if (inputText.length() > 0) {
      lcd.clear();
      currentText = inputText;
      inputText = "";
      scrollIndex = 0;
      readyToScroll = currentText.length() > 16;

      lcd.setCursor(0, 0);
      lcd.print(currentText.substring(0, 16));
      previousMillis = millis();
    }
  } else {
    inputText += c;
  }
}
